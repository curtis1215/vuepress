(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{199:function(t,s,a){"use strict";a.r(s);var e=a(3),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"vuex、vue-router、性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex、vue-router、性能优化"}},[t._v("#")]),t._v(" Vuex、Vue-Router、性能优化")]),t._v(" "),a("h2",{attrs:{id:"vuex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" Vuex")]),t._v(" "),a("h3",{attrs:{id:"什么是-状态管理模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-状态管理模式"}},[t._v("#")]),t._v(" 什么是“状态管理模式”")]),t._v(" "),a("p",[t._v("这个状态自管理应用包含以下几个部分：")]),t._v(" "),a("ul",[a("li",[t._v("state，驱动应用的数据源；")]),t._v(" "),a("li",[t._v("view，以声明方式将 state 映射到视图；")]),t._v(" "),a("li",[t._v("actions，响应在 view 上的用户输入导致的状态变化。")])]),t._v(" "),a("h3",{attrs:{id:"vuex-核心思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex-核心思想"}},[t._v("#")]),t._v(" Vuex 核心思想")]),t._v(" "),a("p",[t._v("Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。有些同学可能会问，那我定义一个全局对象，再去上层封装了一些数据存取的接口不也可以么？")]),t._v(" "),a("p",[t._v("Vuex 和单纯的全局对象有以下两点不同：")]),t._v(" "),a("p",[t._v("Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。")]),t._v(" "),a("p",[t._v("你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。")]),t._v(" "),a("p",[t._v("另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，我们的代码将会变得更结构化且易维护。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://vuex.vuejs.org/vuex.png",alt:"Vuex"}})]),t._v(" "),a("h3",{attrs:{id:"state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[t._v("#")]),t._v(" State")]),t._v(" "),a("p",[t._v("Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。")]),t._v(" "),a("p",[t._v("在 Vue 组件中通过计算属性（computed）获得 Vuex 状态，Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 "),a("code",[t._v("Vue.use(Vuex)")]),t._v("），子组件能通过 "),a("code",[t._v("this.$store")]),t._v(" 访问到。")]),t._v(" "),a("p",[t._v("可以使用 "),a("code",[t._v("mapState")]),t._v(" 辅助函数，帮助我们生成计算属性。")]),t._v(" "),a("h3",{attrs:{id:"getter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getter"}},[t._v("#")]),t._v(" Getter")]),t._v(" "),a("p",[t._v("Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。")]),t._v(" "),a("ul",[a("li",[t._v("属性访问："),a("code",[t._v("store.getters.doneTodos")])]),t._v(" "),a("li",[t._v("对象访问：通过让 getter 返回一个函数，来实现给 getter 传参，"),a("code",[t._v("store.getters.getTodoById(2)")])])]),t._v(" "),a("p",[t._v("注意，getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。")]),t._v(" "),a("p",[a("code",[t._v("mapGetters")]),t._v(" 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性")]),t._v(" "),a("h3",{attrs:{id:"mutation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutation"}},[t._v("#")]),t._v(" Mutation")]),t._v(" "),a("p",[t._v("更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。")]),t._v(" "),a("p",[t._v("Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。")]),t._v(" "),a("h3",{attrs:{id:"action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" Action")]),t._v(" "),a("p",[t._v("Action 类似于 mutation，不同在于：")]),t._v(" "),a("ul",[a("li",[t._v("Action 提交的是 mutation，而不是直接变更状态。")]),t._v(" "),a("li",[t._v("Action 可以包含任意异步操作。")])]),t._v(" "),a("h3",{attrs:{id:"module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[t._v("#")]),t._v(" Module")]),t._v(" "),a("p",[t._v("由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。")]),t._v(" "),a("p",[t._v("为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。")]),t._v(" "),a("p",[t._v("每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。")]),t._v(" "),a("p",[t._v("学习资料：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://vuex.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vuex"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://ustbhuangyi.github.io/vue-analysis/v2/vuex/#vuex",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue.js 技术揭秘之 Vuex"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"vue-router"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[t._v("#")]),t._v(" Vue Router")]),t._v(" "),a("p",[t._v("例如，在 User 组件的模板添加一个 "),a("code",[t._v("<router-view>")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" User "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\n    <div class="user">\n      <h2>User {{ $route.params.id }}</h2>\n      <router-view></router-view>\n    </div>\n  ')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("要在嵌套的出口中渲染组件，需要在 VueRouter 的参数中使用 children 配置：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" router "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VueRouter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  routes"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/user/:id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      component"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 /user/:id/profile 匹配成功，")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// UserProfile 会被渲染在 User 的 <router-view> 中")]),t._v("\n          path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"profile"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          component"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" UserProfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 /user/:id/posts 匹配成功")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// UserPosts 会被渲染在 User 的 <router-view> 中")]),t._v("\n          path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          component"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" UserPosts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"history"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HTML5History")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hash"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashHistory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abstract"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractHistory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"production"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("invalid mode: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("mode"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("其中，3 种路由模式的说明如下：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("hash")]),t._v(": 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；")]),t._v(" "),a("li",[a("strong",[t._v("history")]),t._v(": 依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；")]),t._v(" "),a("li",[a("strong",[t._v("abstract")]),t._v(": 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.")])]),t._v(" "),a("h2",{attrs:{id:"vue-router-中常用路由模式实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-中常用路由模式实现原理"}},[t._v("#")]),t._v(" vue-router 中常用路由模式实现原理")]),t._v(" "),a("h3",{attrs:{id:"hash-模式的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash-模式的实现原理"}},[t._v("#")]),t._v(" hash 模式的实现原理")]),t._v(" "),a("p",[t._v("早期的前端路由的实现就是基于 location.hash 来实现的。")]),t._v(" "),a("p",[t._v("location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 '#search'：")]),t._v(" "),a("div",{staticClass:"language-url extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("https://www.word.com#search\n")])])]),a("p",[t._v("hash 路由模式的实现主要是基于下面几个特性：")]),t._v(" "),a("ul",[a("li",[t._v("URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；")]),t._v(" "),a("li",[t._v("hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 hash 的切换；")]),t._v(" "),a("li",[t._v("可以通过  a  标签，并设置  href  属性，当用户点击这个标签后，URL  的 hash 值会发生改变；或者使用  JavaScript 来对  loaction.hash  进行赋值，改变 URL 的 hash 值；")]),t._v(" "),a("li",[t._v("我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。")])]),t._v(" "),a("h3",{attrs:{id:"history-模式的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#history-模式的实现原理"}},[t._v("#")]),t._v(" history 模式的实现原理")]),t._v(" "),a("p",[t._v("HTML5 提供了 History API 来实现 URL 的变化。")]),t._v(" "),a("p",[t._v("其中做最主要的 API 有以下两个："),a("code",[t._v("history.pushState()")]),t._v(" 和 "),a("code",[t._v("history.repalceState()")]),t._v("。")]),t._v(" "),a("p",[t._v("这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。")]),t._v(" "),a("p",[t._v("唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("history 路由模式的实现主要基于存在下面几个特性：")]),t._v(" "),a("ul",[a("li",[t._v("pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；")]),t._v(" "),a("li",[t._v("我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；")]),t._v(" "),a("li",[a("code",[t._v("history.pushState()")]),t._v(" 或 "),a("code",[t._v("history.replaceState()")]),t._v(" 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。")])]),t._v(" "),a("p",[t._v("学习资料："),a("a",{attrs:{href:"https://juejin.im/post/5d469f1e5188254e1c49ae78",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度剖析：前端路由原理"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"proxy-与-object-defineproperty-优劣对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy-与-object-defineproperty-优劣对比"}},[t._v("#")]),t._v(" Proxy 与 Object.defineProperty 优劣对比")]),t._v(" "),a("p",[t._v("Proxy 的优势如下:")]),t._v(" "),a("ul",[a("li",[t._v("Proxy 可以直接监听对象而非属性；")]),t._v(" "),a("li",[t._v("Proxy 可以直接监听数组的变化；")]),t._v(" "),a("li",[t._v("Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；")]),t._v(" "),a("li",[t._v("Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；")]),t._v(" "),a("li",[t._v("Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；")])]),t._v(" "),a("p",[t._v("Object.defineProperty 的优势如下:")]),t._v(" "),a("ul",[a("li",[t._v("兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题，而且无法用 polyfill 磨平。")])]),t._v(" "),a("h2",{attrs:{id:"proxy-reflect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy-reflect"}},[t._v("#")]),t._v(" Proxy & Reflect")]),t._v(" "),a("p",[t._v("学习资料："),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/60126477",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入实践 ES6 Proxy & Reflect"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"服务端渲染-ssr-的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端渲染-ssr-的优缺点"}},[t._v("#")]),t._v(" 服务端渲染 SSR 的优缺点")]),t._v(" "),a("h3",{attrs:{id:"服务端渲染的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端渲染的优点"}},[t._v("#")]),t._v(" 服务端渲染的优点")]),t._v(" "),a("ul",[a("li",[t._v("更好的 SEO")])]),t._v(" "),a("p",[t._v("因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；")]),t._v(" "),a("ul",[a("li",[t._v("更快的内容到达时间（首屏加载更快）")])]),t._v(" "),a("p",[t._v("SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；")]),t._v(" "),a("h3",{attrs:{id:"服务端渲染的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端渲染的缺点"}},[t._v("#")]),t._v(" 服务端渲染的缺点")]),t._v(" "),a("ul",[a("li",[t._v("更多的开发条件限制")])]),t._v(" "),a("p",[t._v("例如服务端渲染"),a("strong",[t._v("只支持 beforCreate 和 created")]),t._v(" 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；")]),t._v(" "),a("ul",[a("li",[t._v("更多的服务器负载")])]),t._v(" "),a("p",[t._v("在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用 CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。")]),t._v(" "),a("h2",{attrs:{id:"vue-性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-性能优化"}},[t._v("#")]),t._v(" Vue 性能优化")]),t._v(" "),a("p",[t._v("学习资料：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5e854a32518825736c5b807f",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么说 Vue 的响应式更新精确到组件级别？（原理深度解析）"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5d548b83f265da03ab42471d",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 项目性能优化 — 实践指南（网上最全 / 详细）"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"vue-前端工程化开发技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-前端工程化开发技巧"}},[t._v("#")]),t._v(" Vue 前端工程化开发技巧")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5e0202fc6fb9a0165721e39a",target:"_blank",rel:"noopener noreferrer"}},[t._v("吃透 Vue 项目开发实践｜ 16 个方面深入前端工程化开发技巧《上》"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"vue-源码解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-源码解析"}},[t._v("#")]),t._v(" Vue 源码解析")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://ustbhuangyi.github.io/vue-analysis/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue.js 技术揭秘"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.bilibili.com/video/BV1qJ411W7YR",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 源码解析"),a("OutboundLink")],1),t._v(" - 小马哥老师 视频")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/book/5a36661851882538e2259c0f/section/5a37bbb35188257d167a4d64",target:"_blank",rel:"noopener noreferrer"}},[t._v("剖析 Vue.js 内部运行机制"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/HcySunYang/vue-design/tree/master",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 逐行级别的源码分析"),a("OutboundLink")],1),t._v(" - HcySunYang 大佬")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/answershuto/learnVue/blob/master/docs/Vuex%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.MarkDown",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vuex 源码解析"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"vue-学习资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-学习资料"}},[t._v("#")]),t._v(" Vue 学习资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://cn.vuejs.org/v2/api/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 官方文档 API"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://vuex.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vuex"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5d1b464a51882579d824af5b",target:"_blank",rel:"noopener noreferrer"}},[t._v("从源码解读 Vue 生命周期，让面试官对你刮目相看"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5e04411f6fb9a0166049a073",target:"_blank",rel:"noopener noreferrer"}},[t._v("12道vue高频原理面试题,你能答出几道"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5e649e3e5188252c06113021",target:"_blank",rel:"noopener noreferrer"}},[t._v("20+Vue 面试题整理 🔥(持续更新)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5d59f2a451882549be53b170",target:"_blank",rel:"noopener noreferrer"}},[t._v("30 道 Vue 面试题，内含详细讲解（涵盖入门到精通，自测 Vue 掌握程度）"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5d9d386fe51d45784d3f8637",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 开发必须知道的 36 个技巧【近 1W 字】"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5cde0b43f265da03867e78d3",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 组件间通信六种方式（完整版）"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/60126477",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入实践 ES6 Proxy & Reflect"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://ustbhuangyi.github.io/vue-analysis/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue.js 技术揭秘"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"掘金优质作者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#掘金优质作者"}},[t._v("#")]),t._v(" 掘金优质作者")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/user/5b13f11d5188257da1245183/posts",target:"_blank",rel:"noopener noreferrer"}},[t._v("晨曦时梦见兮"),a("OutboundLink")],1),t._v(" - Vue、React、JavaScript、TypeScript")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/user/5bc7de8e5188255c6c626f96/posts",target:"_blank",rel:"noopener noreferrer"}},[t._v("我是你的超级英雄"),a("OutboundLink")],1),t._v(" - 成为前端领域有影响力的人")])])])}),[],!1,null,null,null);s.default=r.exports}}]);