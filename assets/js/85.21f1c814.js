(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{266:function(_,v,e){"use strict";e.r(v);var t=e(3),r=Object(t.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"tcp-ip-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip-协议"}},[_._v("#")]),_._v(" TCP/IP 协议")]),_._v(" "),e("h2",{attrs:{id:"tcp-ip-四层模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip-四层模型"}},[_._v("#")]),_._v(" TCP/IP 四层模型")]),_._v(" "),e("p",[_._v("TCP/IP 协议族中有一个很重要一点就是分层管理，依次为以下四层：")]),_._v(" "),e("ul",[e("li",[_._v("应用层")]),_._v(" "),e("li",[_._v("传输层")]),_._v(" "),e("li",[_._v("网络层")]),_._v(" "),e("li",[_._v("数据链路层")])]),_._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/20/165f78342b47b770?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"TCP/IP 四层模型"}})]),_._v(" "),e("p",[_._v("OSI 七层模型：就是把应用层细分为：应用层、表示层、会话层，把数据链路层细分为链路层和物理层，从上到下七层依次是：")]),_._v(" "),e("ul",[e("li",[_._v("应用层")]),_._v(" "),e("li",[_._v("表示层")]),_._v(" "),e("li",[_._v("会话层")]),_._v(" "),e("li",[_._v("传输层")]),_._v(" "),e("li",[_._v("网络层")]),_._v(" "),e("li",[_._v("数据链路层")]),_._v(" "),e("li",[_._v("物理层")])]),_._v(" "),e("h3",{attrs:{id:"_1-应用层-application-layer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-应用层-application-layer"}},[_._v("#")]),_._v(" 1. 应用层-Application Layer")]),_._v(" "),e("p",[_._v("应用层决定了向用户提供的应用服务时的通信活动:")]),_._v(" "),e("ul",[e("li",[_._v("HTTP（万维网服务）")]),_._v(" "),e("li",[_._v("FTP（文件传输）")]),_._v(" "),e("li",[_._v("SMTP（电子邮件简单发送）")]),_._v(" "),e("li",[_._v("POP3（接收电子邮件）")]),_._v(" "),e("li",[_._v("SSH（安全远程登陆）")]),_._v(" "),e("li",[_._v("Telnet (明文远程登录)")]),_._v(" "),e("li",[_._v("DNS（名称<-> IP 地址寻找,域名系统）")])]),_._v(" "),e("h3",{attrs:{id:"_2-传输层-transport-layer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-传输层-transport-layer"}},[_._v("#")]),_._v(" 2. 传输层-Transport Layer")]),_._v(" "),e("p",[_._v("每一个应用层协议一般都会使用到两个传输层协议之一")]),_._v(" "),e("ul",[e("li",[_._v("TCP：面向连接的 Transmisson Control Protocol 传输控制协议")]),_._v(" "),e("li",[_._v("UDP : 无连接的包传输 User DataProtocol 用户数据报协议")])]),_._v(" "),e("p",[_._v("何为“四元组”?")]),_._v(" "),e("p",[_._v("TCP 连接由源和目标 IP 地址（来自网络层）以及源和目标端口号标识。这也称为四元组：")]),_._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[_._v("// 源IP地址、目的IP地址、源端口、目的端口\n（src ip，dst ip，src port，dst port）\n")])])]),e("p",[_._v("TCP 网络中，为了保障每个连接提供有保证和有序的字节传递，使用了 "),e("code",[_._v("Sequence Number")]),_._v(" (序列号)和 "),e("code",[_._v("Acknowledgment Number")]),_._v(" (确认号)，即 Seq 和 Ack。")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("SYN = 1, ACK = 0")]),_._v("，表示一个连接请求报文段")]),_._v(" "),e("li",[e("code",[_._v("SYN = 1, ACK = 1")]),_._v("，表示一个连接响应报文段")]),_._v(" "),e("li",[e("code",[_._v("FIN = 1")]),_._v("，表示报文段已发送完毕，请求释放连接")])]),_._v(" "),e("h3",{attrs:{id:"_3-网络层-network-layer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-网络层-network-layer"}},[_._v("#")]),_._v(" 3. 网络层-Network Layer")]),_._v(" "),e("p",[_._v("该层中最突出的协议是 Internet 协议（IP），因此该层也称为 IP 层。IP 的核心是两个主要功能：地址和路由。")]),_._v(" "),e("h3",{attrs:{id:"_4-链路层-link-layer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-链路层-link-layer"}},[_._v("#")]),_._v(" 4. 链路层-Link Layer")]),_._v(" "),e("p",[_._v("(又名数据链路层，网络接口层)")]),_._v(" "),e("p",[_._v("用来处理连接网络中的硬件部分，硬件上的范围均在链路层中，包含")]),_._v(" "),e("ul",[e("li",[_._v("操作系统")]),_._v(" "),e("li",[_._v("硬件设备驱动")]),_._v(" "),e("li",[_._v("NIC（Network interface Card 网络适配器：网卡 ）")]),_._v(" "),e("li",[_._v("光纤等物理可见部分")])]),_._v(" "),e("h2",{attrs:{id:"udp-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#udp-协议"}},[_._v("#")]),_._v(" UDP 协议")]),_._v(" "),e("p",[_._v("UDP 协议全称是用户数据报协议，在网络中它与 TCP 协议一样用于处理数据包，是一种无连接的协议。在 OSI 模型中，在第四层——传输层，处于 IP 协议的上一层。UDP 有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。\n它有以下几个特点：")]),_._v(" "),e("ul",[e("li",[_._v("面向无连接")]),_._v(" "),e("li",[_._v("有单播、多播、广播的功能")]),_._v(" "),e("li",[_._v("UDP 是面向报文的")]),_._v(" "),e("li",[_._v("不可靠性，不管接收端能否接收，就按量发送（无拥塞控制），适合实时视频、电话会议、直播等")]),_._v(" "),e("li",[_._v("头部开销小，传输数据报文时是很高效的（8 个字节）")])]),_._v(" "),e("h2",{attrs:{id:"tcp-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-协议"}},[_._v("#")]),_._v(" TCP 协议")]),_._v(" "),e("p",[_._v("TCP 协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的 RFC 793 定义。")]),_._v(" "),e("p",[_._v("TCP 是面向连接的、可靠的流协议。")]),_._v(" "),e("p",[_._v("TCP 协议的特点:")]),_._v(" "),e("ul",[e("li",[_._v("面向连接，建立连接的方法是“三次握手”，这样能建立可靠的连接")]),_._v(" "),e("li",[_._v("仅支持单播传输")]),_._v(" "),e("li",[_._v("面向字节流")]),_._v(" "),e("li",[_._v("可靠传输，SYN+ACK")]),_._v(" "),e("li",[_._v("提供堵塞控制")]),_._v(" "),e("li",[_._v("TCP 提供全双工通信")])]),_._v(" "),e("h2",{attrs:{id:"三次握手四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三次握手四次挥手"}},[_._v("#")]),_._v(" 三次握手四次挥手")]),_._v(" "),e("h3",{attrs:{id:"三次握手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[_._v("#")]),_._v(" 三次握手")]),_._v(" "),e("p",[_._v("为什么 TCP 建立连接需要三次握手，而不是两次？这是因为这是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/8/10/6023cb46caf6ef8cdcc253cc9c827e40?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"三次握手"}})]),_._v(" "),e("ul",[e("li",[_._v("第一次握手：")])]),_._v(" "),e("p",[_._v("建立连接。客户端发送连接请求报文段，将 "),e("code",[_._v("SYN")]),_._v(" 位置为 1，"),e("code",[_._v("Sequence Number")]),_._v(" 为 "),e("code",[_._v("x")]),_._v("；然后，客户端进入 "),e("code",[_._v("SYN_SEND")]),_._v(" 状态，等待服务器的确认；")]),_._v(" "),e("ul",[e("li",[_._v("第二次握手：")])]),_._v(" "),e("p",[_._v("服务器收到 SYN 报文段。服务器收到客户端的 SYN 报文段，需要对这个 SYN 报文段进行确认，设置 "),e("code",[_._v("Acknowledgment Number")]),_._v(" 为 "),e("code",[_._v("x+1")]),_._v("("),e("code",[_._v("Sequence Number+1")]),_._v(")；同时，自己自己还要发送 SYN 请求信息，将 SYN 位置为 1，"),e("code",[_._v("Sequence Number")]),_._v(" 为 y；服务器端将上述所有信息放到一个报文段（即 "),e("code",[_._v("SYN+ACK")]),_._v(" 报文段）中，一并发送给客户端，此时服务器进入 "),e("code",[_._v("SYN_RECV")]),_._v(" 状态；")]),_._v(" "),e("ul",[e("li",[_._v("第三次握手：")])]),_._v(" "),e("p",[_._v("客户端收到服务器的 "),e("code",[_._v("SYN+ACK")]),_._v(" 报文段。然后将 "),e("code",[_._v("Acknowledgment Number")]),_._v(" 设置为 "),e("code",[_._v("y+1")]),_._v("，向服务器发送 "),e("code",[_._v("ACK")]),_._v(" 报文段，这个报文段发送完毕以后，客户端和服务器端都进入 "),e("code",[_._v("ESTABLISHED")]),_._v(" 状态，完成 TCP 三次握手。")]),_._v(" "),e("h3",{attrs:{id:"四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[_._v("#")]),_._v(" 四次挥手")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/8/10/1fd63f511dd955e462bcdd3946e880bf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"四次挥手"}})]),_._v(" "),e("ul",[e("li",[_._v("第一次挥手")])]),_._v(" "),e("p",[_._v("主机 1（可以使客户端，也可以是服务器端），设置"),e("code",[_._v("Sequence Number")]),_._v("，向主机 2 发送一个"),e("code",[_._v("FIN")]),_._v("报文段；此时，主机 1 进入"),e("code",[_._v("FIN_WAIT_1")]),_._v("状态；这表示主机 1 没有数据要发送给主机 2 了；")]),_._v(" "),e("ul",[e("li",[_._v("第二次挥手")])]),_._v(" "),e("p",[_._v("主机 2 收到了主机 1 发送的"),e("code",[_._v("FIN")]),_._v("报文段，向主机 1 回一个"),e("code",[_._v("ACK")]),_._v("报文段，"),e("code",[_._v("Acknowledgment Number")]),_._v("为"),e("code",[_._v("Sequence Number")]),_._v("加 1；主机 1 进入"),e("code",[_._v("FIN_WAIT_2")]),_._v("状态；主机 2 告诉主机 1，我“同意”你的关闭请求；")]),_._v(" "),e("ul",[e("li",[_._v("第三次挥手")])]),_._v(" "),e("p",[_._v("主机 2 向主机 1 发送"),e("code",[_._v("FIN")]),_._v("报文段，请求关闭连接，同时主机 2 进入"),e("code",[_._v("LAST_ACK")]),_._v("状态；")]),_._v(" "),e("ul",[e("li",[_._v("第四次挥手")])]),_._v(" "),e("p",[_._v("主机 1 收到主机 2 发送的"),e("code",[_._v("FIN")]),_._v("报文段，向主机 2 发送"),e("code",[_._v("ACK")]),_._v("报文段，然后主机 1 进入"),e("code",[_._v("TIME_WAIT")]),_._v("状态；主机 2 收到主机 1 的"),e("code",[_._v("AC")]),_._v("K"),e("code",[_._v("报文段以后，就关闭连接；此时，主机1等待")]),_._v("2MSL`后依然没有收到回复，则证明 Server 端已正常关闭，那好，主机 1 也可以关闭连接了。")]),_._v(" "),e("p",[_._v("为什么要四次挥手？TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。")]),_._v(" "),e("p",[_._v("为什么要等待 2MSL？")]),_._v(" "),e("p",[_._v("MSL：报文段最大生存时间，它是任何报文段被丢弃前在网络内的最长时间。")]),_._v(" "),e("p",[_._v("原因有二：")]),_._v(" "),e("ul",[e("li",[_._v("保证 TCP 协议的全双工连接能够可靠关闭")]),_._v(" "),e("li",[_._v("保证这次连接的重复数据段从网络中消失")])]),_._v(" "),e("h2",{attrs:{id:"tcp-流量控制和-tcp-拥塞控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-流量控制和-tcp-拥塞控制"}},[_._v("#")]),_._v(" TCP 流量控制和 TCP 拥塞控制")]),_._v(" "),e("p",[_._v("如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。所谓流量控制就是让发送方的发送速率不要太快，要让接收方来得及接收。")]),_._v(" "),e("p",[_._v("利用滑动窗口机制可以很方便地在 TCP 连接上实现对发送方的流量控制。")]),_._v(" "),e("p",[_._v("发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口。")]),_._v(" "),e("p",[_._v("发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。")]),_._v(" "),e("p",[_._v("拥塞控制和流量控制的差别：")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("拥塞问题是一个全局性的问题,涉及到所有的主机、所有的路由器、以及与降低网络传输性能有关的所有因素。流量控制往往指的是点对点通信量的控制，是个端到端的问题。")])]),_._v(" "),e("li",[e("p",[_._v("流量控制所要做的就是控制发送端发送数据的速率，以便使接收端来得及接受。拥塞控制控制的是注入网络中的数据量。")])]),_._v(" "),e("li",[e("p",[_._v("流量窗口是接收方控制的，拥塞窗口是发送方控制的")])])]),_._v(" "),e("h2",{attrs:{id:"资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[_._v("#")]),_._v(" 资料")]),_._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://juejin.im/post/5c6fbf54f265da2db718216a",target:"_blank",rel:"noopener noreferrer"}},[_._v("TCP 和 UDP 比较"),e("OutboundLink")],1)]),_._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/post/5ca95ed46fb9a05e3d0a8533",target:"_blank",rel:"noopener noreferrer"}},[_._v("「真香警告」重学 TCP/IP 协议 与三次握手"),e("OutboundLink")],1),_._v(" - 有图有真相，好理解")]),_._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/post/5ad7e6c35188252ebd06acfa",target:"_blank",rel:"noopener noreferrer"}},[_._v("面试带你飞：这是一份全面的 计算机网络基础 总结攻略"),e("OutboundLink")],1)]),_._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/post/5ba3b68c6fb9a05d287345ab",target:"_blank",rel:"noopener noreferrer"}},[_._v("前端必须懂的计算机网络知识—(TCP)"),e("OutboundLink")],1)]),_._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/post/598ba1d06fb9a03c4d6464ab",target:"_blank",rel:"noopener noreferrer"}},[_._v("关于 TCP/IP，必知必会的十个问题"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);